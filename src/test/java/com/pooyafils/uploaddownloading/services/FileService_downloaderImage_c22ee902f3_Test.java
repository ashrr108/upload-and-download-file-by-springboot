// Test generated by RoostGPT for test java-sping-test2 using AI Type Open AI and AI Model gpt-4

package com.pooyafils.uploaddownloading.services;

import com.pooyafils.uploaddownloading.domain.MyFile;
import com.pooyafils.uploaddownloading.repository.MyFileRepository;
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.multipart.MultipartFile;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class FileService_downloaderImage_c22ee902f3_Test {

    @InjectMocks
    private FileService fileService;

    @Mock
    private FileInputStream fileInputStream;

    @Value("${file.path}")
    private String path;

    @BeforeEach
    public void setUp() throws Exception {
        when(fileInputStream.readAllBytes()).thenReturn(new byte[]{1, 2, 3, 4, 5});
    }

    @Test
    public void testDownloaderImage_success() throws Exception {
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = fileService.downloaderImage("testImage.jpg");
        assertArrayEquals(expected, actual);
    }

    @Test
    public void testDownloaderImage_noFile() {
        assertThrows(IOException.class, () -> fileService.downloaderImage("doesNotExist.jpg"));
    }
}
