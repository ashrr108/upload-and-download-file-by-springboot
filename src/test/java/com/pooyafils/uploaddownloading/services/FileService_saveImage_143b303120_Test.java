// Test generated by RoostGPT for test java-sping-test2 using AI Type Open AI and AI Model gpt-4

package com.pooyafils.uploaddownloading.services;

import com.pooyafils.uploaddownloading.domain.MyFile;
import com.pooyafils.uploaddownloading.repository.MyFileRepository;
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class FileService_saveImage_143b303120_Test {

    @InjectMocks
    FileService fileService;

    @Mock
    MyFileRepository repository;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSaveImageSuccess() throws IOException {
        MultipartFile file = new MockMultipartFile("file", "hello.txt", "text/plain", "Hello, World!".getBytes());
        String description = "Test Description";
        String path = "/test/path/";
        String url = "http://localhost:8080/";

        MyFile expectedFile = MyFile.builder()
                .name(file.getOriginalFilename())
                .description(description)
                .path(path)
                .url(url + file.getOriginalFilename())
                .build();

        when(repository.save(any(MyFile.class))).thenReturn(expectedFile);

        MyFile actualFile = fileService.saveImage(file, description);

        verify(repository, times(1)).save(any(MyFile.class));
        assertEquals(expectedFile, actualFile);
    }

    @Test
    public void testSaveImageFailure() throws IOException {
        MultipartFile file = new MockMultipartFile("file", "hello.txt", "text/plain", "Hello, World!".getBytes());
        String description = "Test Description";

        when(repository.save(any(MyFile.class))).thenThrow(new RuntimeException("Failed to save file"));

        try {
            fileService.saveImage(file, description);
        } catch (RuntimeException e) {
            assertEquals("Failed to save file", e.getMessage());
        }
    }
}
