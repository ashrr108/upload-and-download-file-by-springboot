// Test generated by RoostGPT for test java-sping-test2 using AI Type Vertex AI and AI Model text-bison

package com.pooyafils.uploaddownloading.services;

import com.pooyafils.uploaddownloading.domain.MyFile;
import com.pooyafils.uploaddownloading.repository.MyFileRepository;
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class FileService_findAllImageUrl_57cc430b85_Test {

    private static final Logger LOGGER = LoggerFactory.getLogger(FileService_findAllImageUrl_57cc430b85_Test.class);

    @Mock
    private MyFileRepository repository;

    @InjectMocks
    private FileService fileService;

    @Test
    public void testFindAllImageUrl_Success() throws IOException {
        // Given
        List<MyFile> expected = new ArrayList<>();
        MyFile file = new MyFile();
        file.setId(1L);
        file.setName("test.jpg");
        file.setUrl("https://test.com/test.jpg");
        expected.add(file);

        // When
        when(repository.findAll()).thenReturn(expected);

        // Then
        List<MyFile> actual = fileService.findAllImageUrl();
        assertEquals(expected, actual);
    }

    @Test
    public void testFindAllImageUrl_NoImage() throws IOException {
        // Given
        List<MyFile> expected = new ArrayList<>();

        // When
        when(repository.findAll()).thenReturn(expected);

        // Then
        List<MyFile> actual = fileService.findAllImageUrl();
        assertEquals(expected, actual);
    }
}
